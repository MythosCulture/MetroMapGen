
void FindPath(int start, int end) {
    int startIndex = start;
    int endIndex = end;
    int startEndDelta = end - start; //tracks # of indexes between start and end
    int drawReturn;

    String lastAction = "none"; //prevents repeating steps

    String msg ="";
    
    do{
        //Calculating rows ("steps") allowed to travel for given cycle
        double calculateSteps = (double)(startEndDelta) / cols;
        //double calculateSteps = ((double)(startEndDelta) / cols > rows/2) ? ((double)(startEndDelta) / cols)/2 : (double)(startEndDelta) / cols;
        int steps = (int)random((int)calculateSteps + 1);
        boolean endIsLeft = (startIndex % cols > endIndex % cols) ? true : false;
        int rndMove = (int)random(3);
        
        //Notes//
        System.out.println("-----START OF TURN-----");
        System.out.println("endIsLeft:\t\t" + endIsLeft);
        System.out.println("calculateSteps:\t\t" + calculateSteps);
        System.out.println("steps:\t\t\t" + steps);
        System.out.println("startEndDelta:\t\t" + startEndDelta);
        System.out.println("startIndex:\t\t"+ startIndex);
        //end of notes//

        //TODO: Find way to prevent steps from picking consistently high/low numbers
        //and if the number of total steps allowed is low, force it to use all of them
        //this needs to scale, since the grid can technically be any size. Hard coding a "5" won't work for example
        //Potential solution: Make inital calculatedSteps a variable then use that to create percentages to guide selection of steps

        if (startEndDelta >= cols && steps != 0) {
            switch(rndMove) {
                default:
                case 0 : //move down from start
                    if (lastAction == "down") {
                        break;
                    }
                    msg = "    SWITCH A: 0, moved " + steps + " rows DOWN from START.";
                    drawReturn = drawPath(startIndex, steps, cols, endIsLeft, msg);

                    startIndex += drawReturn;
                    startEndDelta -= drawReturn;
                    lastAction = "down";
                    break;
                case 1 : //move left and right
                    if (lastAction == "side") {
                        break;
                    }
                    int sideStepDelta = startEndDelta % cols; //total steps allowed to move left or right
                    int sideStepsToEdge = startIndex % cols;
                    int sideSteps;
                    if (endIsLeft) {
                        sideSteps = (sideStepsToEdge < sideStepDelta) ? (int)random(sideStepsToEdge) : (int)random(sideStepDelta);
                        msg = "    SWITCH A: 1, moved " + sideSteps + " cells LEFT from START.";
                        drawReturn = drawPath(startIndex, sideSteps, -1, endIsLeft, msg);
                        System.out.println("        CALC:"+ startIndex % cols);
                        System.out.println("        sideSteps:"+ sideSteps);

                        startIndex -= drawReturn; //neg bc moving left
                        startEndDelta += drawReturn;
                    }
                    else if (!endIsLeft) {
                        sideSteps = (cols-sideStepsToEdge < sideStepDelta) ? (int)random(cols-sideStepsToEdge) : (int)random(sideStepDelta);
                        msg = "    SWITCH A: 1, moved " + sideSteps + " cells RIGHT from START.";
                        drawReturn = drawPath(startIndex, sideSteps, 1, endIsLeft, msg);
                        System.out.println("        CALC:"+ (cols-(startIndex % cols)));
                        System.out.println("        sideSteps:"+ sideSteps);

                        startIndex += drawReturn;
                        startEndDelta -= drawReturn;
                    }
                    lastAction = "side";
                    break;
                case 2 : //move diagonally or side to side
                    if(lastAction == "diagonal") {
                        break;
                    }
                    if (endIsLeft) {
                        msg = "    SWITCH A: 2a, moved " + steps + " rows DOWN/LEFT from START.";
                        //     //Don't go past the end point & don't move past the borders of the grid
                        //     if (startIndex + (cols-1) >= endIndex || startIndex % cols == 0) {
                        drawReturn = drawPath(startIndex, steps, cols-1, endIsLeft, msg);

                        startIndex += drawReturn;
                        startEndDelta -= drawReturn;
                    }
                    else if (!endIsLeft) {
                        msg = "    SWITCH A: 2b, moved " + steps + " rows DOWN/RIGHT from START.";
                        //     //Don't go past the end point & don't move past the borders of the grid
                        //     if (startIndex + (cols+1) >= endIndex || startIndex % cols == cols-1){
                        drawReturn = drawPath(startIndex, steps, cols+1, endIsLeft, msg);

                        startIndex += drawReturn;
                        startEndDelta -= drawReturn;
                    }
                else {
                    System.out.println("    SWITCH A: 2c, met condition OTHER");
                    System.out.println(startEndDelta);
                    startEndDelta = 0;
                }
                lastAction = "diagonal";
                break;
            }
        }
        else if (startEndDelta < cols) {
            //if (startEndDelta == cols-1) { //Hasn't triggered yet
            //    System.out.println("    !!(LEGAL)" + startEndDelta + " DELTA REMAINING. SETTING TO 0.");
            //    startEndDelta = 0;
            //}

            if (endIsLeft) {
                //"cols-startEndDelta" bc otherwise it wants to go left all the way to the next line up
                //start index is one line too far up from end index
                msg = "    SWITCH B: True, moved " +  (cols-startEndDelta) + " rows LEFT from START.";
                drawReturn = drawPath(startIndex,  cols-startEndDelta, -1, endIsLeft, msg);

                startIndex -= drawReturn; //neg bc moving left
                startEndDelta += drawReturn;
            }
            else if (!endIsLeft) {
                msg = "    SWITCH B: False, moved " + startEndDelta + " rows RIGHT from START.";
                drawReturn = drawPath(startIndex, startEndDelta, 1, endIsLeft, msg);

                startIndex += drawReturn;
                startEndDelta -= drawReturn;
            }

            //if(startEndDelta > 0) { //Has been triggered when startEndDelta is negative before
                // check whats up if this starts getting triggered
                //System.out.println(startEndDelta + " DELTA REMAINING. SETTING TO 0.");
                //startEndDelta = 0;
            //}
        }
        System.out.println("end startEndDelta:\t" + startEndDelta);
        System.out.println("----END OF TURN-----");
    } while(startEndDelta != 0);
    
}

int drawPath( int index, int loopCounter, int incrNum, boolean endIsLeft ,String message) {
    int indexStart = index;
    int indexEnd;

    System.out.println(message); //for debugging

    for(int i = loopCounter; i > 0; i--) {
        index += incrNum;
        cells[index].isActive = true;

        //only works for increments of 1
        if (endIsLeft && index % cols == 0) { //Don't move off grid left
            System.out.println("\t\t!!Tried to move off grid LEFT!!");
            break;
        }
        else if (!endIsLeft && index % cols == cols-1) { //Don't move off grid right
            System.out.println("\t\t!!Tried to move off grid RIGHT!!");
            break;
        }
    }
